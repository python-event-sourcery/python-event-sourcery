name: Lint & tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
    
env:
  POETRY_VERSION: "2.1.1"

jobs:
  build:

    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [ '3.10', '3.11', '3.12' ]

    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: es
          POSTGRES_PASSWORD: es
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      eventstoredb:
        image: eventstore/eventstore:latest
        env:
          EVENTSTORE_MEM_DB: True
          EVENTSTORE_CLUSTER_SIZE: 1
          EVENTSTORE_RUN_PROJECTIONS: All
          EVENTSTORE_START_STANDARD_PROJECTIONS: true
          EVENTSTORE_INSECURE: true
          EVENTSTORE_ENABLE_ATOM_PUB_OVER_HTTP: true
        ports:
          - 1113:1113
          - 2113:2113

    steps:
    - uses: actions/checkout@v2
    - name: Cache Poetry cache
      uses: actions/cache@v4
      with:
        path: ~/.cache/pypoetry
        key: poetry-cache-${{ runner.os }}-${{ matrix.python-version }}-${{ env.POETRY_VERSION }}
    - name: Cache Packages
      uses: actions/cache@v4
      with:
        path: ~/.local
        key: poetry-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}-${{ hashFiles('.github/workflows/*.yml') }}
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install deps
      run: |
        python -m pip install --upgrade pip poetry==${{ env.POETRY_VERSION }}
        poetry install --with=dev --all-extras
    - name: Run linters
      run: |
        poetry run make lint
    - name: Build docs
      run: |
        poetry run mkdocs build -f docs/documentation/mkdocs.yml
    - name: Test with pytest
      run: |
        poetry run make test
